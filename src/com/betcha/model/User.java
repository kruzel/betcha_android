package com.betcha.model;

import java.io.InputStream;
import java.sql.SQLException;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.client.RestClientException;

import android.content.ContentResolver;
import android.content.ContentUris;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.ContactsContract;
import android.util.Log;
import android.widget.ImageView;

import com.betcha.BetchaApp;
import com.betcha.model.cache.ModelCache;
import com.betcha.model.server.api.TokenRestClient;
import com.betcha.model.server.api.UserRestClient;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;

@DatabaseTable(tableName = "users")
public class User extends ModelCache<User,Integer> {

	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	private int id;
	@DatabaseField
	private String name;
	@DatabaseField
	private String email;
	@DatabaseField
	private String password;
	@DatabaseField
	private String provider;
	@DatabaseField
	private String uid;
	@DatabaseField
	private String access_token;
	@DatabaseField
	private String push_notifications_device_id; 
	@DatabaseField
	private String profile_pic_url;

	private Long contact_id;
	private Long contact_photo_id;
	
	//non persistent
	private static UserRestClient userClient;
	private static Dao<User,Integer> dao;
	private static Bitmap default_pic;
	private static ImageLoader imageLoader;
	private static DisplayImageOptions defaultOptions;
	
	private Boolean isInvitedToBet = false;
	
	public void setUser(User newUser) {
		this.id = newUser.getId();
		this.name = newUser.getName();
		this.email = newUser.getEmail();
		this.password = newUser.getPassword();
		this.provider = newUser.getProvider();
		this.uid = newUser.getUid();
		this.access_token = newUser.getAccess_token();
		this.profile_pic_url = newUser.getProfile_pic_url();
		this.push_notifications_device_id = newUser.getPush_notifications_device_id();
		this.contact_id = newUser.getContact_id();
		this.contact_photo_id = newUser.getContact_photo_id();
		setCreated_at(newUser.getCreated_at());
		setUpdated_at(newUser.getUpdated_at());
	}

	public UserRestClient getUserClient() {
		if(userClient==null)
			userClient = new UserRestClient();
		
		return userClient;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String pass) {
		this.password = pass;
	}

	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}
	
	public String getProvider() {
		return provider;
	}

	public void setProvider(String provider) {
		this.provider = provider;
	}

	public String getAccess_token() {
		return access_token;
	}

	public void setAccess_token(String access_token) {
		this.access_token = access_token;
	}

	public Boolean getIsInvitedToBet() {
		return isInvitedToBet;
	}

	public void setIsInvitedToBet(Boolean isInvitedToBet) {
		this.isInvitedToBet = isInvitedToBet;
	}
	
	public String getProfile_pic_url() {
		return profile_pic_url;
	}

	public void setProfile_pic_url(String profile_pic_url) {
		this.profile_pic_url = profile_pic_url;
	}

	public Long getContact_id() {
		return contact_id;
	}

	public void setContact_id(Long contact_id) {
		this.contact_id = contact_id;
	}

	public Long getContact_photo_id() {
		return contact_photo_id;
	}

	public void setContact_photo_id(Long contact_photo_id) {
		this.contact_photo_id = contact_photo_id;
	}

	public String getPush_notifications_device_id() {
		return push_notifications_device_id;
	}

	public void setPush_notifications_device_id(String push_notifications_device_id) {
		this.push_notifications_device_id = push_notifications_device_id;
	}

	/**
	 * static methods that must be implemented by derived class
	 * @return Dao object
	 * @throws SQLException
	 */
	public static Dao<User,Integer> getModelDao() throws SQLException  {
		if(dao==null){
			dao = getDbHelper().getDao(User.class);;
		}
		return dao;
	}
	
	@Override
	public void initDao() {
		try {
			setDao(getModelDao());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	protected Boolean authenticateCreate() {
		return false;
	}

	/** inherited ModelCache methods */
	public int onRestCreate() {
		Friend friend = new Friend(this);
		//report completion only after friend get is done
		friend.setListener(listener);
		setListener(null);
		
		if(createUserAccount()==0)
			return 0;
		
		if(createToken()==0)
			return 0;
			
		//get friends
		friend.getAllForCurUser();
		
		return 1;
	}
	
	public int createUserAccount() {
		int res = 0;
		JSONObject jsonUser = null;
		
		try {
			res = createOrUpdateLocal();
		} catch (SQLException e1) {
			e1.printStackTrace();
			return 0;
		}
		
		if (provider.equals("email")) {
			jsonUser = getUserClient().create(name, email, password, profile_pic_url);
		} else if (provider.equals("facebook")) {
			jsonUser = getUserClient().createOAuth(provider, uid, access_token);
		}
		
		if(jsonUser==null)
			return 0;
			
		setJson(jsonUser);
		//setServer_id(jsonUser.optInt("id",-1));
		try {
			res = updateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return res;
	}
	
	public int createToken() {
			
		TokenRestClient tokenClient = new TokenRestClient();
		String jsonToken = null;
		if (provider.equals("email")) {
			jsonToken = tokenClient.create(email, password);
		} else if (provider.equals("facebook")) {
			jsonToken = tokenClient.createOAuth(provider, uid, access_token);
		}
					
		BetchaApp.setToken(jsonToken);
		
		if(jsonToken==null) {
			return 0;
		} else {
			return 1;
		}
	}

	public int onRestUpdate() {
		Log.i("User.onRestUpdate()", "updating server");
		getUserClient().update(this);
		
		return 1;
	}

	public int onRestDelete() {
		getUserClient().delete(getServer_id());
		return 1;
	}

	public int onRestSyncToServer() {
		int res = 0;
		if(!isServerUpdated()) {
			if(getServer_id()==-1) {
				res = onRestCreate();
			} else {
				res = onRestUpdate(); 
			}
		} 
		
		return res;
	}
	
	@Override
	public int onRestGet() {
		User user = getAndCreateUser(getServer_id());
		if(user!=null)
			setUser(user);
		
		if(user==null)
			return 0;
		else
			return 1;
	}

	@Override
	public int onRestGetWithDependents() {
		User user = getAndCreateUser(getServer_id());
		if(user!=null)
			setUser(user);
		
		//get friends
		Friend friend = new Friend(user);
		friend.getAllForCurUser();
		
		if(user==null)
			return 0;
		else
			return 1;
	}
	
	@Override
	public int onRestGetAllForCurUser() {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public static User getAndCreateUser(int server_id) {
		User tmpOwner = null;
		try {
			List<User> listUser = null;
			listUser = User.getModelDao().queryForEq("server_id", server_id);
			if(listUser!=null && listUser.size()>0) {
				tmpOwner = listUser.get(0);
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if(tmpOwner == null) { //then create it
			tmpOwner = new User();
		} else {
			return tmpOwner;
		}
		
		UserRestClient userClient = new UserRestClient();
		JSONObject jsonOwner = null;
		try {
			jsonOwner = userClient.show(server_id);
		} catch (RestClientException e) {
			e.printStackTrace();
			return null;
		}
		if(jsonOwner==null)
			return null;
		
		tmpOwner.setJson(jsonOwner);
				
		try {
			tmpOwner.createOrUpdateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		
		return tmpOwner;
	}
	
	public static User getAndCreateUserViaEmail(String email) {
		User tmpOwner = null;
		try {
			List<User> listUser = null;
			listUser = User.getModelDao().queryForEq("email", email);
			if(listUser!=null && listUser.size()>0) {
				tmpOwner = listUser.get(0);
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

		if(tmpOwner == null) { //then create it
			tmpOwner = new User();
		} else {
			return tmpOwner;
		}
		
		UserRestClient userClient = new UserRestClient();
		JSONObject jsonOwner = null;
		try {
			jsonOwner = userClient.show(email);
		} catch (RestClientException e) {
			e.printStackTrace();
			return null;
		}
		if(jsonOwner==null)
			return null;
		
		tmpOwner.setJson(jsonOwner);
				
		try {
			tmpOwner.createOrUpdateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		
		return tmpOwner;
	}
	
	public static User getAndCreateUserViaFacebookUid(String uid) {
		User tmpOwner = null;
		try {
			List<User> listUser = null;
			listUser = User.getModelDao().queryForEq("uid", uid);
			if(listUser!=null && listUser.size()>0) {
				tmpOwner = listUser.get(0);
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

		if(tmpOwner == null) { //then create it
			tmpOwner = new User();
		} else {
			return tmpOwner;
		}
		
		UserRestClient userClient = new UserRestClient();
		JSONObject jsonOwner = null;
		try {
			jsonOwner = userClient.show(uid);
		} catch (RestClientException e) {
			e.printStackTrace();
			return null;
		}
		if(jsonOwner==null)
			return null;
		
		tmpOwner.setJson(jsonOwner);
				
		try {
			tmpOwner.createOrUpdateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		
		return tmpOwner;
	}
	
	public Boolean setJson(JSONObject json) {
		super.setJson(json);
		
		try {
			setProvider(json.getString("provider"));
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		try {
			setEmail(json.getString("email"));
		} catch (JSONException e1) {
		}
		try {
			setName(json.getString("full_name"));
		} catch (JSONException e1) {
			e1.printStackTrace();
		}
		try {
			setUid(json.getString("uid"));
		} catch (JSONException e) {
		}
		
		try {
			String pic = json.getString("profile_pic_url");
			if(pic!=null && !pic.equals("null"))
				setProfile_pic_url(pic);
		} catch (JSONException e) {
		}
		
		try {
			setPush_notifications_device_id(json.getString("push_notifications_device_id"));
		} catch (JSONException e) {
		}
		
		return true;
	}
	
	public void cancelProfilePhotoUpdate(ImageView image) 	{
		if(imageLoader!=null) 
			imageLoader.cancelDisplayTask(image);
	}
	
	public void setProfilePhoto(ImageView image) 	{
		Bitmap profile_pic_bitmap = null;
		if(default_pic==null)
			default_pic = BitmapFactory.decodeResource(context.getResources(), com.betcha.R.drawable.ic_launcher);
				
		//default image
		image.setImageBitmap(Bitmap.createScaledBitmap(default_pic, 48, 48, false));
		
		ContentResolver cr = context.getContentResolver();
		
		if(getContact_id()!=null) {
		    Uri uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, getContact_id());
		    InputStream input = ContactsContract.Contacts.openContactPhotoInputStream(cr, uri);
		    if (input != null) 
		    {
		    	profile_pic_bitmap = BitmapFactory.decodeStream(input);
		    	image.setImageBitmap(Bitmap.createScaledBitmap(profile_pic_bitmap, 48, 48, false));
		    	return;
		    }
		}

		if(getContact_photo_id()!=null) {
		    byte[] photoBytes = null;
	
		    Uri photoUri = ContentUris.withAppendedId(ContactsContract.Data.CONTENT_URI, getContact_photo_id());
		    Cursor c = cr.query(photoUri, new String[] {ContactsContract.CommonDataKinds.Photo.PHOTO}, null, null, null);
	
		    try 
		    {
		        if (c.moveToFirst()) 
		            photoBytes = c.getBlob(0);
	
		    } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        c.close();
		    }           
	
		    if (photoBytes != null) {
		    	profile_pic_bitmap = BitmapFactory.decodeByteArray(photoBytes,0,photoBytes.length);
		    	image.setImageBitmap(Bitmap.createScaledBitmap(profile_pic_bitmap, 48, 48, false));
		    	return;
		    }
		}
		
		if(imageLoader==null) {
			imageLoader = ImageLoader.getInstance();
			// Initialize ImageLoader with configuration. Do it once.
			imageLoader.init(ImageLoaderConfiguration.createDefault(context));
			defaultOptions = new DisplayImageOptions.Builder()
	        .cacheInMemory()
	        .cacheOnDisc()
	        .build();
		}
		
		if(getProvider().equals("facebook")) {	
			String url = "http://graph.facebook.com/" + getUid() + "/picture?type=square";
			imageLoader.displayImage(url, image,defaultOptions);
			return;
    	}
		
		String url = "http://robohash.org/" + getEmail() + ".png?set=set3&size=48x48";
		imageLoader.displayImage(url, image,defaultOptions);
		
	}
	
}
