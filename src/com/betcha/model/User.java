package com.betcha.model;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import com.betcha.BetchaApp;
import com.betcha.model.cache.ModelCache;
import com.betcha.model.server.api.TokenRestClient;
import com.betcha.model.server.api.UserRestClient;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

@DatabaseTable(tableName = "users")
public class User extends ModelCache<User,Integer> {

	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	private int id;
	@DatabaseField
	private String name;
	@DatabaseField
	private String email;
	@DatabaseField
	private String password;
	@DatabaseField
	private String provider;
	@DatabaseField
	private String uid;
	@DatabaseField
	private String access_token;
	
	private Boolean isInvitedToBet;
	private UserRestClient userClient = new UserRestClient();
	
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String pass) {
		this.password = pass;
	}

	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}
	
	public String getProvider() {
		return provider;
	}

	public void setProvider(String provider) {
		this.provider = provider;
	}

	public Boolean getIsInvitedToBet() {
		return isInvitedToBet;
	}

	public void setIsInvitedToBet(Boolean isInvitedToBet) {
		this.isInvitedToBet = isInvitedToBet;
	}
	
	/**
	 * static methods that must be implemented by derived class
	 * @return Dao object
	 * @throws SQLException
	 */
	public static Dao<User,Integer> getModelDao() throws SQLException  {
		return getDbHelper().getDao(User.class);
	}
	
	@Override
	public void initDao() {
		try {
			setDao((Dao<User, Integer>) getDbHelper().getDao(User.class));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	protected Boolean authenticateCreate() {
		return false;
	}

	/** inherited ModelCache methods */
	public int onRestCreate() {
		JSONObject jsonUser = null;
		
		if (provider == "email") {
			jsonUser = userClient.create(name, email, password);
		} else if (provider == "facebook") {
			jsonUser = userClient.createOAuth(provider, uid, access_token);
		}
		
		setServer_id(jsonUser.optInt("server_id",-1));
				
		TokenRestClient tokenClient = new TokenRestClient();
		String jsonToken = null;
		if (provider == "email") {
			jsonToken = tokenClient.create(email, password);
		} else if (provider == "facebook") {
			jsonToken = tokenClient.createOAuth(provider, uid, access_token);
		}
					
		BetchaApp.setToken(jsonToken);
		
		if(getServer_id()!=0)
			return 1;
		else
			return 0;
	}

	public int onRestUpdate() {
		Map<String,String> arg = new HashMap<String, String>();
		arg.put("name", name);
		arg.put("email", email);
		arg.put("password", password);
		arg.put("provider", provider);
		arg.put("uid", uid);
		arg.put("access_token", access_token);
		
		userClient.update(arg, serverId);
		
		return getServer_id();
	}

	public int onRestDelete() {
		userClient.delete(getServer_id());
		return 1;
	}

	public int onRestSync() {
		JSONObject json = userClient.show(getServer_id());
		try {
			name = json.getString("name");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			email = json.getString("email");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//password = json.optString("password");
		try {
			provider = json.getString("provider");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			uid = json.getString("uid");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			access_token = json.getString("access_token");
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			super.update();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return 1;
	}
	
}
