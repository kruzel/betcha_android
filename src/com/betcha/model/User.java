package com.betcha.model;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.web.client.RestClientException;

import com.betcha.BetchaApp;
import com.betcha.model.cache.ModelCache;
import com.betcha.model.server.api.BetRestClient;
import com.betcha.model.server.api.TokenRestClient;
import com.betcha.model.server.api.UserRestClient;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

@DatabaseTable(tableName = "users")
public class User extends ModelCache<User,Integer> {

	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	private int id;
	@DatabaseField
	private String name;
	@DatabaseField
	private String email;
	@DatabaseField
	private String password;
	@DatabaseField
	private String provider;
	@DatabaseField
	private String uid;
	@DatabaseField
	private String access_token;
	
	//non persistent
	private static UserRestClient userClient;
	private static Dao<User,Integer> dao;
	
	private Boolean isInvitedToBet = false;
	

	public void setUser(User newUser) {
		this.id = newUser.getId();
		this.name = newUser.getName();
		this.email = newUser.getEmail();
		this.password = newUser.getPassword();
		this.provider = newUser.getProvider();
		this.uid = newUser.getUid();
		this.access_token = newUser.getAccess_token();
	}

	public UserRestClient getUserClient() {
		if(userClient==null)
			userClient = new UserRestClient();
		
		return userClient;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String pass) {
		this.password = pass;
	}

	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}
	
	public String getProvider() {
		return provider;
	}

	public void setProvider(String provider) {
		this.provider = provider;
	}

	public String getAccess_token() {
		return access_token;
	}

	public void setAccess_token(String access_token) {
		this.access_token = access_token;
	}

	public Boolean getIsInvitedToBet() {
		return isInvitedToBet;
	}

	public void setIsInvitedToBet(Boolean isInvitedToBet) {
		this.isInvitedToBet = isInvitedToBet;
	}
	
	/**
	 * static methods that must be implemented by derived class
	 * @return Dao object
	 * @throws SQLException
	 */
	public static Dao<User,Integer> getModelDao() throws SQLException  {
		if(dao==null){
			dao = getDbHelper().getDao(User.class);;
		}
		return dao;
	}
	
	@Override
	public void initDao() {
		try {
			setDao(getModelDao());
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	protected Boolean authenticateCreate() {
		return false;
	}

	/** inherited ModelCache methods */
	public int onRestCreate() {
		if(createUserAccount()>0) {
			return createToken();
		}
		
		return 0;
	}
	
	public int createUserAccount() {
		int res = 0;
		JSONObject jsonUser = null;
		
		try {
			res = createOrUpdateLocal();
		} catch (SQLException e1) {
			e1.printStackTrace();
			return 0;
		}
		
		if (provider == "email") {
			jsonUser = getUserClient().create(name, email, password);
		} else if (provider == "facebook") {
			jsonUser = getUserClient().createOAuth(provider, uid, access_token);
			setJson(jsonUser);
		}
		
		if(jsonUser==null)
			return 0;
			
			
		setServer_id(jsonUser.optInt("id",-1));
		try {
			res = updateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return res;
	}
	
	public int createToken() {
			
		TokenRestClient tokenClient = new TokenRestClient();
		String jsonToken = null;
		if (provider == "email") {
			jsonToken = tokenClient.create(email, password);
		} else if (provider == "facebook") {
			jsonToken = tokenClient.createOAuth(provider, uid, access_token);
		}
					
		BetchaApp.setToken(jsonToken);
		
		if(jsonToken==null) {
			return 0;
		} else {
			return 1;
		}
	}

	public int onRestUpdate() {
		Map<String,String> arg = new HashMap<String, String>();
		arg.put("name", name);
		arg.put("email", email);
		arg.put("password", password);
		arg.put("provider", provider);
		arg.put("uid", uid);
		arg.put("access_token", access_token);
		
		getUserClient().update(arg, server_id);
		
		return getServer_id();
	}

	public int onRestDelete() {
		getUserClient().delete(getServer_id());
		return 1;
	}

	public int onRestSync() {
		User user = getAndCreateUser(getServer_id());
		
		//TODO save client side changes to server
			
		if(user==null)
			return 0;
		else
			return 1;
	}
	
	@Override
	public int onRestGet() {
		User user = getAndCreateUser(getServer_id());
		if(user!=null)
			setUser(user);
		
		if(user==null)
			return 0;
		else
			return 1;
	}

	@Override
	public int onRestGetWithDependents() {
		User user = getAndCreateUser(getServer_id());
		if(user!=null)
			setUser(user);
		
		List<Bet> bets;
		bets = new ArrayList<Bet>();
		
		BetRestClient restClient = new BetRestClient();
		JSONArray jsonBets = null;
		try {
			jsonBets = restClient.show_for_user(); //for logged in user
		} catch (RestClientException e) {
			e.printStackTrace();
			return 0;
		} 
		
		for (int i = 0; i < jsonBets.length(); i++) {
			JSONObject jsonBet;
		
			try {
				jsonBet = jsonBets.getJSONObject(i);
			} catch (JSONException e3) {
				e3.printStackTrace();
				continue;
			}
			
			Bet tmpBet = null;
			try {
				List<Bet> tmpBets = Bet.getModelDao().queryForEq("server_id", jsonBet.getInt("id"));
				if(tmpBets!=null && tmpBets.size()>0) { 
					tmpBet = tmpBets.get(0);
				}
			} catch (SQLException e2) {
				e2.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
			
			if(tmpBet==null) {
				tmpBet = new Bet();
			}
							
			if(!tmpBet.setJson(jsonBet))
				continue;
			
			try {
				tmpBet.createOrUpdateLocal();
			} catch (SQLException e) {
				e.printStackTrace();
				continue;
			}
			
			if(Prediction.getAndCreatePredictions(tmpBet)==null)
				continue;
			
			bets.add(tmpBet);
			
		}
		
		if(user==null)
			return 0;
		else
			return 1;
	}
	
	public static User getAndCreateUser(int server_id) {
		User tmpOwner = null;
		try {
			List<User> listUser = null;
			listUser = User.getModelDao().queryForEq("server_id", server_id);
			if(listUser!=null && listUser.size()>0) {
				tmpOwner = listUser.get(0);
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		if(tmpOwner == null) { //then create it
			tmpOwner = new User();
		}
		
		UserRestClient userClient = new UserRestClient();
		JSONObject jsonOwner = null;
		try {
			jsonOwner = userClient.show(server_id);
		} catch (RestClientException e) {
			e.printStackTrace();
			return null;
		}
		if(jsonOwner==null)
			return null;
		
		tmpOwner.setJson(jsonOwner);
				
		try {
			tmpOwner.createOrUpdateLocal();
		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		
		return tmpOwner;
	}
	
	public Boolean setJson(JSONObject json) {
		try {
			setEmail(json.getString("email"));
		} catch (JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			setName(json.getString("full_name"));
		} catch (JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			setServer_id(json.getInt("id"));
		} catch (JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			setUid(json.getString("uid"));
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return true;
	}
}
